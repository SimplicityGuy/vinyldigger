name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Run pre-commit
        uses: pre-commit/action@2c7b3805fd2a0fd8c1884dcaebf91fc102a13ecd # v3.0.1

  backend-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: vinyldigger_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@f3bcaebff5eace81a1c062af9f9011aae482ca9d # v3.2.0

      - name: Install just via arkade
        uses: alexellis/arkade-get@8391dd7c2ae8ece497d2f7cf4fe98d05bde78cbe # v1.0.0
        with:
          just: latest

      - name: Install dependencies
        run: just install-backend-ci

      - name: Run tests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/vinyldigger_test
          REDIS_URL: redis://localhost:6379
        run: just test-backend-ci

      - name: Upload coverage
        uses: codecov/codecov-action@b9fd7d16f6d7d1b5d2bec1a2887e65ceed900238 # v4.6.0
        with:
          file: ./backend/coverage.xml

  frontend-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install just via arkade
        uses: alexellis/arkade-get@8391dd7c2ae8ece497d2f7cf4fe98d05bde78cbe # v1.0.0
        with:
          just: latest

      - name: Install dependencies
        run: just install-frontend

      - name: Run tests
        run: just test-frontend-ci

      - name: Build
        run: just build-frontend

  e2e-test:
    runs-on: ubuntu-latest
    needs: [pre-commit, backend-test, frontend-test]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install just via arkade
        uses: alexellis/arkade-get@8391dd7c2ae8ece497d2f7cf4fe98d05bde78cbe # v1.0.0
        with:
          just: latest

      - name: Build and start services
        run: |
          just test-ci

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 1; done'
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 1; done'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install Playwright
        working-directory: frontend
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Run E2E tests
        working-directory: frontend
        run: npm run test:e2e

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

      - name: Stop services
        if: always()
        run: just test-down
