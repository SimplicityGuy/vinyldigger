name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    timeout-minutes: 5  # Pre-commit hooks typically take 2-3 min, 1.5x safety factor
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install just
        uses: extractions/setup-just@e33e0265a09d6d736e2ee1e0eb685ef1de4669ff # v3.0.0
        with:
          just-version: '1.38.0'  # Pin to specific version for reliability

      - name: Install docker-compose
        uses: alexellis/arkade-get@1eef818e467c387d3f50cfe0d2c565d1cbe82b03 # master
        with:
          docker-compose: latest

      - name: Install pre-commit
        run: |
          just install-pre-commit

      - name: Run pre-commit
        run: just lint

  backend-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Backend tests with services typically take 8-10 min, 1.5x safety factor
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: vinyldigger_test
        options: >-
          --health-cmd "pg_isready -U test -d vinyldigger_test"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10
          --health-start-period 10s
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10
          --health-start-period 10s
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@bd01e18f51369d5a26f1651c3cb451d3417e3bba # v5.0.0
        with:
          enable-cache: true

      - name: Install just
        uses: extractions/setup-just@e33e0265a09d6d736e2ee1e0eb685ef1de4669ff # v3.0.0
        with:
          just-version: '1.38.0'  # Pin to specific version for reliability

      - name: Install docker-compose
        uses: alexellis/arkade-get@1eef818e467c387d3f50cfe0d2c565d1cbe82b03 # master
        with:
          docker-compose: latest

      - name: Install Redis CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-tools

      - name: Install dependencies
        run: just install-backend-ci

      - name: Wait for services
        run: |
          echo "Waiting for PostgreSQL..."
          until pg_isready -h localhost -p 5432 -U test; do
            echo "PostgreSQL is unavailable - sleeping"
            sleep 2
          done
          echo "PostgreSQL is up"

          echo "Waiting for Redis..."
          until redis-cli -h localhost ping; do
            echo "Redis is unavailable - sleeping"
            sleep 2
          done
          echo "Redis is up"

      - name: Run tests
        env:
          DATABASE_URL: postgresql+asyncpg://test:test@localhost:5432/vinyldigger_test
          REDIS_URL: redis://localhost:6379
          SECRET_KEY: test-secret-key
          CELERY_BROKER_URL: redis://localhost:6379/1
          CELERY_RESULT_BACKEND: redis://localhost:6379/2
        run: just test-backend-ci

      - name: Upload coverage
        uses: codecov/codecov-action@b9fd7d16f6d7d1b5d2bec1a2887e65ceed900238 # v4.6.0
        with:
          file: ./backend/coverage.xml

  frontend-test:
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Frontend tests + build typically take 5-7 min, 1.5x safety factor

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install just
        uses: extractions/setup-just@e33e0265a09d6d736e2ee1e0eb685ef1de4669ff # v3.0.0
        with:
          just-version: '1.38.0'  # Pin to specific version for reliability

      - name: Install docker-compose
        uses: alexellis/arkade-get@1eef818e467c387d3f50cfe0d2c565d1cbe82b03 # master
        with:
          docker-compose: latest

      - name: Install dependencies
        run: just install-frontend

      - name: Run tests
        run: just test-frontend-ci

      - name: Build
        run: just build-frontend
